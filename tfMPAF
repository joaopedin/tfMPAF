//+------------------------------------------------------------------+
//|                                             TesteDiagnostico.mq5 |
//|                                  Copyright 2022, Prof. Alexandre Rossini |
//|                                             https://www.mql5.com |
//+------------------------------------------------------------------+
#property copyright "Copyright 2021, MetaQuotes Ltd."
#property link      "https://www.mql5.com"
#property version   "1.00"

#include <Trade\Trade.mqh>

CTrade trade;
MqlRates candle[];

input ENUM_TIMEFRAMES periodo=PERIOD_H4;

//Manipulador e buffer da média móvel lenta
int handleMMLenta;
double bufferMMLenta[];

//Manipulador e buffer da média móvel rápida
int handleMMRapida;
double bufferMMRapida[];

//Manipulador e buffer do oscilador Chaikin (indicador de volume)
int handleChaikin;
double bufferChaikin[];

//Manipulador e buffer do índice de força relativa (indicador de sobrecompra/sobrevenda)
int handleRsi;
double bufferRsi[];

//Manipulador e buffer do Momentum (indicador de preço)
int handleMomentum;
double bufferMomentum[];

//VARIÁVEIS DE RESUMO FINANCEIRO PARA RELATÓRIO FINAL
double patrimonio=10000.0;
double lucro=0.0;
double abertura=-1.0;


int OnInit()
{
   trade.SetAsyncMode(false);
   //MarketBookAdd(_Symbol);
   
   //Inicializa a média móvel lenta simples com 20 períodos 
   handleMMLenta=iMA(_Symbol,periodo,20,0,MODE_SMA,PRICE_CLOSE);
   if(IniciaIndicador(handleMMLenta,"iMA_20")==INIT_FAILED) return INIT_FAILED;
   
   //Inicializa a média móvel rápida simples com 5 períodos
   handleMMRapida=iMA(_Symbol,periodo,5,0,MODE_SMA,PRICE_CLOSE);
   if(IniciaIndicador(handleMMRapida,"iMA_5")==INIT_FAILED) return INIT_FAILED;  
   
   //Inicializa o oscilador Chaikin com valores padrões
   handleChaikin=iChaikin(_Symbol,periodo,3,10,MODE_EMA,VOLUME_TICK);
   if(IniciaIndicador(handleChaikin,"iChaikin")==INIT_FAILED) return INIT_FAILED;
   
   //Inicializa o índice de força relativa com valores padrões
   handleRsi=iRSI(_Symbol,periodo,14,PRICE_CLOSE); 
   if(IniciaIndicador(handleRsi,"iRSI")==INIT_FAILED) return INIT_FAILED;
   
   //Inicializa o Momentum com valores padrões
   handleMomentum=iMomentum(_Symbol,periodo,14,PRICE_CLOSE); 
   if(IniciaIndicador(handleMomentum,"iMomentum")==INIT_FAILED) return INIT_FAILED;

   return(INIT_SUCCEEDED);
}


void OnDeinit(const int reason)
{
   Print("  ==============================");
   Print("  Buy and hold = "+DoubleToString(((candle[0].close/abertura)-1)*100.0,2)+"%");
   Print("  ==============================");
   Print("  Patrimonio inicial = "+(string)patrimonio);
   Print("  Lucro = "+(string)lucro);
   //Print("  ==============================");
   Print("  Patrimônio final = "+(string)(patrimonio+lucro)+" ("+DoubleToString(lucro/patrimonio*100,2)+"%)");
   Print("  ==============================");
}


void OnTick()
{
   if(isNewBar())
   { 
      CopyRates(_Symbol,_Period,0,100,candle);
      ArraySetAsSeries(candle,true); 
      if(abertura<0.0)
      {
         abertura=candle[0].open;
      }
      
      CopyBuffer(handleMMLenta,0,0,50,bufferMMLenta);
      ArraySetAsSeries(bufferMMLenta,true);
      
      CopyBuffer(handleMMRapida,0,0,50,bufferMMRapida);
      ArraySetAsSeries(bufferMMRapida,true); 
      
      CopyBuffer(handleChaikin,0,0,50,bufferChaikin);
      ArraySetAsSeries(bufferChaikin,true);
      
      CopyBuffer(handleRsi,0,0,14,bufferRsi);
      ArraySetAsSeries(bufferRsi,true);
      
      CopyBuffer(handleRsi,0,0,14,bufferMomentum);
      ArraySetAsSeries(bufferMomentum,true);
      
      //COMPRA
      if(!PositionSelect(_Symbol)) 
      {
         if(MediaRapidaCruzouParaCima(5) && Tendencia(7,bufferChaikin)>5.0 && bufferChaikin[1]>0 && bufferRsi[1]<70 && Tendencia(7,bufferRsi)>5.0 && Tendencia(10,bufferMomentum)>5.0 && candle[1].close>candle[1].open)
         //if (bufferMMRapida[2]<bufferMMLenta[2] && bufferMMRapida[1]>bufferMMLenta[1] && Tendencia(7,bufferOBV)>0 && bufferRsi[1]<70 && Tendencia(7,bufferRsi)>0 && candle[1].close>candle[1].open)
         {
            int qt=((int)((patrimonio/(candle[1].high*1.01))/100.0))*100;
            if(trade.Buy(qt,_Symbol,0,0,0,"Ordem de compra")) 
            {
               Print("Comprou");
            }
         }
      }
      else if(PositionSelect(_Symbol) && PositionGetInteger(POSITION_TYPE)==POSITION_TYPE_BUY)
      {    
         //VENDA   
         if((bufferMMRapida[2]>bufferMMLenta[2] && bufferMMRapida[1]<bufferMMLenta[1]) || (Tendencia(7,bufferChaikin)<0 && Tendencia(7,bufferMMRapida)<0 && bufferChaikin[1]<0.0 && Tendencia(7,bufferRsi)<0.0) || candle[1].close<bufferMMLenta[1]*0.99)// || bufferRsi[1]>70)
         {
            if(trade.Sell(PositionGetDouble(POSITION_VOLUME),_Symbol,0,0,0,"Ordem de venda")) 
            {
               lucro+=PositionGetDouble(POSITION_PROFIT);
               Print("Vendeu");
            }
         }
      }
   }  
}
//+------------------------------------------------------------------+

//Verifica se o indicador foi iniciado com sucesso
int IniciaIndicador(int handle,string indicador)
{
   if(handle==INVALID_HANDLE)
   {
      PrintFormat("Falha ao criar o manipulador do indicador %s para o símbolo %s/%s, código de erro %d",indicador,_Symbol,EnumToString(periodo),GetLastError());
      return(INIT_FAILED);
   }
   return(INIT_SUCCEEDED);
}

//Retorna true caso seja criado novo candle
bool isNewBar() 
{   
   static datetime last_time=0;
   datetime lastbar_time=(datetime)SeriesInfoInteger(_Symbol,periodo,SERIES_LASTBAR_DATE);

   if(last_time==0)
   {
      last_time=lastbar_time;
      return false;
   }
   if(last_time!=lastbar_time)
   {
      last_time=lastbar_time;
      return true;
   }         
   return false;
}

//Retorna valores maiores do que 0 em tendência de alta e menores do que 0 em baixa
double Tendencia(int n,double &buffer[])
{
   double soma_x=0.0;
   double soma_y=0.0;
   double soma_x2=0.0;
   double soma_xy=0.0;

   double min=999999.9,max=-999999.9;

   for(int i=n;i>0;i--)
   {
      if(buffer[i]<min)
      {
         min=buffer[i];
      }
      if(buffer[i]>max)
      {
         max=buffer[i];
      }
   }

   if(max-min==0)
   {
      max++;
   }

   for(int i=n;i>0;i--)
   {
      soma_xy+=((n-i+1)*((buffer[i]-min)/(max-min))*100);
      soma_x+=(n-i+1);
      soma_y+=(buffer[i]-min)/(max-min)*100;
      soma_x2+=pow((n-i+1),2);
   }

   double alfa=(n*soma_xy-soma_x*soma_y)/(n*soma_x2-pow(soma_x,2));
   return alfa;

   /*double beta=(soma_y/(double)n)-alfa*(soma_x/(double)n);
   Print("alfa = "+alfa+"; beta = "+beta+"; OBV = "+bufferObv[1]);
   return alfa*(n+1)+beta+min;*/
}

//Retorna true se a média móvel rápida cruzou a lenta de baixo para cima nos últimos n candles
bool MediaRapidaCruzouParaCima(int n)
{
   for(int i=1;i<=n-1;i++)
   {
      if(bufferMMLenta[i]<bufferMMRapida[i]) {
         for(int j=i+1;j<=n;j++)
         {
            if(bufferMMLenta[j]>bufferMMRapida[j])
            {
               return true;
            }
         }
      }
   }
   return false;

//



}
